}
example(spatialPlotClusters)
?spatialPlotClusters
seu <- FindSVGs(seu, nfeatures = 2000)
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',verbose=F)
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), variable.type=c("HVGs", "SVGs"),...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(nfeatures > nrow(seu)){
warning('nrow(seu) is less than nfeatures, so assign nfeatures with nrow(seu)!')
nfeatures <- nrow(seu)
}
if(variable.type=='HVGs'){
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}
var.features <- seu@assays$RNA@var.features[1:nfeatures]
}else{
cat("Using SVGs to fit DR.SC model since variable.type=SVGs...\n")
var.features <- row.names(seu)[seu[[DefaultAssay(seu)]]@meta.features$is.SVGs]
}
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,]))
resList <- DR.SC.fit(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- resList$K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay=DefaultAssay(seu))
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',verbose=F)
spatialPlotClusters(seu1)
?drscPlot
example(mbicPlot)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
seu1 <- DR.SC(seu, K=NULL, K_set=2:6,platform = 'ST',variable.type = 'SVGs', verbose=F,pen.const=0.5)
mbicPlot(seu1)
?Seurat::ReadMtx
if(platform=="ST"){
beta= 1
}elseif(platform=='scRNAseq'){
beta = 0
}
#### Generate Spatial data with ST platform
gendata_spatial <- function(height=30, width=30, platform="ST", p =100, q=10, K=7,
G=4,sigma2=1, tau=8, seed=1, view=F){
if(q <2) stop("error:gendata_sp::q must be greater than 2!")
require(GiRaF)
require(MASS)
n <- height * width # # of cell in each indviduals
if(platform=="ST"){
beta= 1
}else if(platform=='scRNAseq'){
beta = 0
}
## generate deterministic parameters, fixed after generation
set.seed(1)
# sigma2 <- 1
Lambda <- sigma2*abs(rnorm(p, sd=1))
W1 <- matrix(rnorm(p*q), p, q)
W <- qr.Q(qr(W1))
mu <- matrix(0, q,  K)
diagmat = array(0, dim = c(q, q, K))
if(q > K){
q1 <- floor(K/2)
for(j in 1:q1){
if(j <= (q1/2)) mu[j,j] <- tau
if(j > (q1/2)) mu[j,j] <- -tau
}
mu[(q1+1):q, K] <- -tau
}else if(q <= K){
for(k in 1:K)
mu[,k] <- rep(tau/8 *k, q) #
}
for(k in 1:K){
tmp  <- rep(1, q)
if(k <= K/2){
tmp[q] <- tau
}
diag(diagmat[,,k]) <- tmp
}
Mu <- t(mu)
Sigma <- diagmat
set.seed(seed)
# generate the spatial dependence for state variable y, a hidden Markov RF
y <- sampler.mrf(iter = n, sampler = "Gibbs", h = height, w = width, ncolors = K, nei = G, param = beta,
initialise = FALSE, view = view)
y <- c(y) + 1
Z <- matrix(0, n, q)
for(k in 1:K){
nk <- sum(y==k)
Z[y==k, ] <- MASS::mvrnorm(nk, Mu[k,], Sigma[,,k])
}
Ez <- colMeans(Z)
Mu <- Mu - matrix(Ez, K, q, byrow=T) # center Z
X <- Z %*% t(W) + MASS::mvrnorm(n, mu=rep(0,p), Sigma=diag(Lambda))
# svd_Sig <- svd(cov(Z))
# W12 <- W %*% svd_Sig$u %*% diag(sqrt(svd_Sig$d))
# signal <- sum(svd(W12)$d^2)
# snr <- sum(svd(W12)$d^2) / (sum(svd(W12)$d^2)+ sum(Lambda))
#
# cat("SNR=", round(snr,4), '\n')
# make position
pos <- cbind(rep(1:height, width), rep(1:height, each=width))
#  make BayesSpace metadata used in BayesSpace-------------------------------------------------
counts <- t(X) - min(X)
p <- ncol(X); n <- nrow(X)
rownames(counts) <- paste0("gene-", seq_len(p))
colnames(counts) <- paste0("spot-", seq_len(n))
## Make array coordinates - filled rectangle
cdata <- list()
if(platform=="ST"){
cdata$row <- pos[,1]
cdata$col <- pos[,2]
cdata <- as.data.frame(do.call(cbind, cdata))
cdata$imagerow <- cdata$row
cdata$imagecol <- cdata$col
row.names(cdata) <- colnames(counts)
}
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1, meta.data=cdata)
seu$true_clusters <- y
return(seu)
}
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4,platform="scRNAseq")
#### Generate Spatial data with ST platform
gendata_RNAExp <- function(height=30, width=30, platform="ST", p =100, q=10, K=7,
G=4,sigma2=1, tau=8, seed=1, view=F){
if(q <2) stop("error:gendata_sp::q must be greater than 2!")
require(GiRaF)
require(MASS)
n <- height * width # # of cell in each indviduals
if(platform=="ST"){
beta= 1
}else if(platform=='scRNAseq'){
beta = 0
}
## generate deterministic parameters, fixed after generation
set.seed(1)
# sigma2 <- 1
Lambda <- sigma2*abs(rnorm(p, sd=1))
W1 <- matrix(rnorm(p*q), p, q)
W <- qr.Q(qr(W1))
mu <- matrix(0, q,  K)
diagmat = array(0, dim = c(q, q, K))
if(q > K){
q1 <- floor(K/2)
for(j in 1:q1){
if(j <= (q1/2)) mu[j,j] <- tau
if(j > (q1/2)) mu[j,j] <- -tau
}
mu[(q1+1):q, K] <- -tau
}else if(q <= K){
for(k in 1:K)
mu[,k] <- rep(tau/8 *k, q) #
}
for(k in 1:K){
tmp  <- rep(1, q)
if(k <= K/2){
tmp[q] <- tau
}
diag(diagmat[,,k]) <- tmp
}
Mu <- t(mu)
Sigma <- diagmat
set.seed(seed)
# generate the spatial dependence for state variable y, a hidden Markov RF
y <- sampler.mrf(iter = n, sampler = "Gibbs", h = height, w = width, ncolors = K, nei = G, param = beta,
initialise = FALSE, view = view)
y <- c(y) + 1
Z <- matrix(0, n, q)
for(k in 1:K){
nk <- sum(y==k)
Z[y==k, ] <- MASS::mvrnorm(nk, Mu[k,], Sigma[,,k])
}
Ez <- colMeans(Z)
Mu <- Mu - matrix(Ez, K, q, byrow=T) # center Z
X <- Z %*% t(W) + MASS::mvrnorm(n, mu=rep(0,p), Sigma=diag(Lambda))
# svd_Sig <- svd(cov(Z))
# W12 <- W %*% svd_Sig$u %*% diag(sqrt(svd_Sig$d))
# signal <- sum(svd(W12)$d^2)
# snr <- sum(svd(W12)$d^2) / (sum(svd(W12)$d^2)+ sum(Lambda))
#
# cat("SNR=", round(snr,4), '\n')
# make position
pos <- cbind(rep(1:height, width), rep(1:height, each=width))
#  make BayesSpace metadata used in BayesSpace-------------------------------------------------
counts <- t(X) - min(X)
p <- ncol(X); n <- nrow(X)
rownames(counts) <- paste0("gene-", seq_len(p))
colnames(counts) <- paste0("spot-", seq_len(n))
## Make array coordinates - filled rectangle
cdata <- list()
if(platform=="ST"){
cdata$row <- pos[,1]
cdata$col <- pos[,2]
cdata <- as.data.frame(do.call(cbind, cdata))
cdata$imagerow <- cdata$row
cdata$imagecol <- cdata$col
row.names(cdata) <- colnames(counts)
}
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1, meta.data=cdata)
seu$true_clusters <- y
return(seu)
}
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4,platform="scRNAseq")
#### Generate Spatial data with ST platform
gendata_RNAExp <- function(height=30, width=30, platform="ST", p =100, q=10, K=7,
G=4,sigma2=1, tau=8, seed=1, view=F){
if(q <2) stop("error:gendata_sp::q must be greater than 2!")
require(GiRaF)
require(MASS)
n <- height * width # # of cell in each indviduals
if(platform=="ST"){
beta= 1
}else if(platform=='scRNAseq'){
beta = 0
}
## generate deterministic parameters, fixed after generation
set.seed(1)
# sigma2 <- 1
Lambda <- sigma2*abs(rnorm(p, sd=1))
W1 <- matrix(rnorm(p*q), p, q)
W <- qr.Q(qr(W1))
mu <- matrix(0, q,  K)
diagmat = array(0, dim = c(q, q, K))
if(q > K){
q1 <- floor(K/2)
for(j in 1:q1){
if(j <= (q1/2)) mu[j,j] <- tau
if(j > (q1/2)) mu[j,j] <- -tau
}
mu[(q1+1):q, K] <- -tau
}else if(q <= K){
for(k in 1:K)
mu[,k] <- rep(tau/8 *k, q) #
}
for(k in 1:K){
tmp  <- rep(1, q)
if(k <= K/2){
tmp[q] <- tau
}
diag(diagmat[,,k]) <- tmp
}
Mu <- t(mu)
Sigma <- diagmat
set.seed(seed)
# generate the spatial dependence for state variable y, a hidden Markov RF
y <- sampler.mrf(iter = n, sampler = "Gibbs", h = height, w = width, ncolors = K, nei = G, param = beta,
initialise = FALSE, view = view)
y <- c(y) + 1
Z <- matrix(0, n, q)
for(k in 1:K){
nk <- sum(y==k)
Z[y==k, ] <- MASS::mvrnorm(nk, Mu[k,], Sigma[,,k])
}
Ez <- colMeans(Z)
Mu <- Mu - matrix(Ez, K, q, byrow=T) # center Z
X <- Z %*% t(W) + MASS::mvrnorm(n, mu=rep(0,p), Sigma=diag(Lambda))
# svd_Sig <- svd(cov(Z))
# W12 <- W %*% svd_Sig$u %*% diag(sqrt(svd_Sig$d))
# signal <- sum(svd(W12)$d^2)
# snr <- sum(svd(W12)$d^2) / (sum(svd(W12)$d^2)+ sum(Lambda))
#
# cat("SNR=", round(snr,4), '\n')
# make position
pos <- cbind(rep(1:height, width), rep(1:height, each=width))
#  make BayesSpace metadata used in BayesSpace-------------------------------------------------
counts <- t(X) - min(X)
p <- ncol(X); n <- nrow(X)
rownames(counts) <- paste0("gene-", seq_len(p))
colnames(counts) <- paste0("spot-", seq_len(n))
## Make array coordinates - filled rectangle
if(platform=="ST"){
cdata <- list()
cdata$row <- pos[,1]
cdata$col <- pos[,2]
cdata <- as.data.frame(do.call(cbind, cdata))
cdata$imagerow <- cdata$row
cdata$imagecol <- cdata$col
row.names(cdata) <- colnames(counts)
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1, meta.data=cdata)
}else if(platform=='scRNAseq'){
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1)
}
seu$true_clusters <- y
return(seu)
}
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4,platform="scRNAseq")
seu
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4,platform="scRNAseq")
seu <- NormalizeData(seu)
# choose 400 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 400)
seu1 <- DR.SC(seu, K=4, platform = 'scRNAseq', verbose=F)
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), variable.type="HVGs",...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(nfeatures > nrow(seu)){
warning('nrow(seu) is less than nfeatures, so assign nfeatures with nrow(seu)!')
nfeatures <- nrow(seu)
}
if(variable.type=='HVGs'){
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}
var.features <- seu@assays$RNA@var.features[1:nfeatures]
}else{
cat("Using SVGs to fit DR.SC model since variable.type=SVGs...\n")
var.features <- row.names(seu)[seu[[DefaultAssay(seu)]]@meta.features$is.SVGs]
}
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,]))
resList <- DR.SC.fit(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- resList$K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay=DefaultAssay(seu))
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu1 <- DR.SC(seu, K=4, platform = 'scRNAseq', verbose=F)
seu@assays$RNA@var.features[1:nfeatures]
nrow(seu)
seu@assays$RNA@var.features
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), variable.type="HVGs",...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(nfeatures > nrow(seu)){
warning('nrow(seu) is less than nfeatures, so assign nfeatures with nrow(seu)!')
nfeatures <- nrow(seu)
}
if(variable.type=='HVGs'){
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}
if(nfeatures > length(seu@assays$RNA@var.features)){
warning('number of variable genes is less than nfeatures,
so assign nfeatures with number of variable genes!')
nfeatures <- length(seu@assays$RNA@var.features)
}
var.features <- seu@assays$RNA@var.features[1:nfeatures]
}else{
cat("Using SVGs to fit DR.SC model since variable.type=SVGs...\n")
var.features <- row.names(seu)[seu[[DefaultAssay(seu)]]@meta.features$is.SVGs]
}
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,]))
resList <- DR.SC.fit(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- resList$K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay=DefaultAssay(seu))
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu1 <- DR.SC(seu, K=4, platform = 'scRNAseq', verbose=F)
seu1
seu1 <- DR.SC(seu, K=4, platform = 'scRNAseq',nfeatures=400, verbose=F)
## generate scRNAseq data
seu <- gendata_RNAExp(height=30, width=30, platform="scRNAseq", p=500, K=4)
seu
library(DR.SC)
example("spatialPlotClusters")
example("drscPlot")
example("mbicPlot")
rm(list=ls())
example("mbicPlot")
example(getAdj)
example("topSVGs")
example(RunW)
example(RunWPCA)
example("FindSVGs")
example("read10XVisium")
example("gendata_RNAExp")
Seurat::ReadMtx()
?Seurat::ReadMtx
readscRNAseq <- function(mtx, cells, features, ...){
spMat <- ReadMtx(mtx,cells,features, ...)
seu <- CreateSeuratObject(counts = spMat)
seu@tools$platform <- "scRNAseq"
seu
}
setwd("D:\\LearnFiles\\Research paper\\IntegrateDRcluster\\RealData\\LiverData\\Data1")
seu <- readscRNAseq(mtx="GSM3755564_16_Liver_Treg_matrix.mtx.gz",
eatures='GSM3755564_16_Liver_Treg_genes.tsv.gz',
cellsf='GSM3755564_16_Liver_Treg_barcodes.tsv.gz' )
seu <- readscRNAseq(mtx="GSM3755564_16_Liver_Treg_matrix.mtx.gz",
features='GSM3755564_16_Liver_Treg_genes.tsv.gz',
cellsf='GSM3755564_16_Liver_Treg_barcodes.tsv.gz' )
seu <- readscRNAseq(mtx="GSM3755564_16_Liver_Treg_matrix.mtx.gz",
features='GSM3755564_16_Liver_Treg_genes.tsv.gz',
cells='GSM3755564_16_Liver_Treg_barcodes.tsv.gz' )
seu
suset(seu, subsaple=500)
subset(seu, subsaple=500)
subset(seu, subsample=500)
?subset.Seurat
subset(seu, cells=1:100)
FindSVGs(seu)
# Data prepocessing -------------------------------------------------------
## use SPARK to choose spatially variable genes
FindSVGs <- function(seu, nfeatures=2000,num_core=1, verbose=T){
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
require(SPARK)
require(Seurat)
sp_count <- seu@assays$RNA@counts
if(nrow(sp_count)>5000){
seu <- FindVariableFeatures(seu, nfeatures = 5000, verbose=verbose)
sp_count <- seu@assays$RNA@counts[seu@assays$RNA@var.features,]
}
location <- as.data.frame(cbind(seu$row, seu$col))
if(verbose){
cat("Find the spatially variables genes by SPARK-X...\n")
}
sparkX <- sparkx(sp_count,location,numCores=num_core,option="mixture", verbose=verbose)
if(nfeatures > nrow(sp_count)) nfeatures <- nrow(sp_count)
genes <- row.names(sp_count)[order(sparkX$res_mtest$adjustedPval)[1:nfeatures]]
is.SVGs <- rep(F, nrow(seu))
names(is.SVGs) <- row.names(seu)
is.SVGs[genes] <- T
seu[['RNA']]@meta.features$is.SVGs <- is.SVGs
seu
}
FindSVGs(seu)
is.null(seu$row)
library(DR.SC)
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("DR.SC")
data("HCC1", package = 'DR.SC')
# standard log-normalization
HCC1 <- NormalizeData(HCC1)
# choose 2000 spatial highly variable features
seu <- FindSVGs(HCC1, nfeatures = 2000)
### Given K
seu <- DR.SC(seu, K=6, platform = 'Visium', variable.type = 'SVGs',verbose=F)
spatialPlotClusters(seu)
drscPlot(seu)
drscPlot(seu, visu.method = 'UMAP')
mbicPlot <- function(seu){
if (!inherits(seu, "Seurat"))
stop("seu must be a Seurat object!")
if(is.null(seu@tools$icMat)) stop("There is no MBIC-related information in 'seu' object!")
library(ggplot2)
icMat <- as.data.frame(seu@tools$icMat)
ggplot(data=icMat,
aes(x=K, y=mbic)) + geom_line(size=1) + cowplot::theme_cowplot() + ylab("MBIC")
}
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sessionInfo()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sessionInfo()
pkgdown::build_site()
pkgdown::build_site()
getwd()
