diag(diagmat[,,k]) <- tmp
}
Mu <- t(mu)
Sigma <- diagmat
set.seed(seed)
# generate the spatial dependence for state variable y, a hidden Markov RF
y <- sampler.mrf(iter = n, sampler = "Gibbs", h = height, w = width, ncolors = K, nei = G, param = beta,
initialise = FALSE, view = view)
y <- c(y) + 1
Z <- matrix(0, n, q)
for(k in 1:K){
nk <- sum(y==k)
Z[y==k, ] <- MASS::mvrnorm(nk, Mu[k,], Sigma[,,k])
}
Ez <- colMeans(Z)
Mu <- Mu - matrix(Ez, K, q, byrow=T) # center Z
X <- Z %*% t(W) + MASS::mvrnorm(n, rep(0,p), diag(Lambda))
svd_Sig <- svd(cov(Z))
W12 <- W %*% svd_Sig$u %*% diag(sqrt(svd_Sig$d))
signal <- sum(svd(W12)$d^2)
snr <- sum(svd(W12)$d^2) / (sum(svd(W12)$d^2)+ sum(Lambda))
cat("SNR=", round(snr,4), '\n')
# make position
pos <- cbind(rep(1:height, width), rep(1:height, each=width))
#  make BayesSpace metadata used in BayesSpace-------------------------------------------------
counts <- t(X) + min(X)
p <- ncol(X); n <- nrow(X)
rownames(counts) <- paste0("gene_", seq_len(p))
colnames(counts) <- paste0("spot_", seq_len(n))
## Make array coordinates - filled rectangle
cdata <- list()
cdata$row <- pos[,1]
cdata$col <- pos[,2]
cdata <- as.data.frame(do.call(cbind, cdata))
cdata$imagerow <- cdata$row
cdata$imagecol <- cdata$col
row.names(cdata) <- colnames(counts)
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1, meta.data=cdata)
seu$true_clusters <- y
return(seu)
}
seu <- gendata_spatial(height=30, width=30)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=7, platform = 'ST', verbose=F)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu
seu@assays$RNA@counts
seu <- gendata_spatial(height=30, width=30)
seu@assays$RNA@counts
#### Generate Spatial data with ST platform
gendata_spatial <- function(height=30, width=30, p =100, q=10, K=7,  G=4, beta=1, sigma2=1, tau=8, seed=1, view=F){
if(q <2) stop("error:gendata_sp::q must be greater than 2!")
require(GiRaF)
require(MASS)
n <- height * width # # of cell in each indviduals
## generate deterministic parameters, fixed after generation
set.seed(1)
# sigma2 <- 1
Lambda <- sigma2*abs(rnorm(p, sd=1))
W1 <- matrix(rnorm(p*q), p, q)
W <- qr.Q(qr(W1))
mu <- matrix(0, q,  K)
diagmat = array(0, dim = c(q, q, K))
if(q > K){
q1 <- floor(K/2)
for(j in 1:q1){
if(j <= (q1/2)) mu[j,j] <- tau
if(j > (q1/2)) mu[j,j] <- -tau
}
mu[(q1+1):q, K] <- -tau
}else if(q <= K){
for(k in 1:K)
mu[,k] <- rep(tau/8 *k, q) #
}
for(k in 1:K){
tmp  <- rep(1, q)
if(k <= K/2){
tmp[q] <- tau
}
diag(diagmat[,,k]) <- tmp
}
Mu <- t(mu)
Sigma <- diagmat
set.seed(seed)
# generate the spatial dependence for state variable y, a hidden Markov RF
y <- sampler.mrf(iter = n, sampler = "Gibbs", h = height, w = width, ncolors = K, nei = G, param = beta,
initialise = FALSE, view = view)
y <- c(y) + 1
Z <- matrix(0, n, q)
for(k in 1:K){
nk <- sum(y==k)
Z[y==k, ] <- MASS::mvrnorm(nk, Mu[k,], Sigma[,,k])
}
Ez <- colMeans(Z)
Mu <- Mu - matrix(Ez, K, q, byrow=T) # center Z
X <- Z %*% t(W) + MASS::mvrnorm(n, rep(0,p), diag(Lambda))
svd_Sig <- svd(cov(Z))
W12 <- W %*% svd_Sig$u %*% diag(sqrt(svd_Sig$d))
signal <- sum(svd(W12)$d^2)
snr <- sum(svd(W12)$d^2) / (sum(svd(W12)$d^2)+ sum(Lambda))
cat("SNR=", round(snr,4), '\n')
# make position
pos <- cbind(rep(1:height, width), rep(1:height, each=width))
#  make BayesSpace metadata used in BayesSpace-------------------------------------------------
counts <- t(X) - min(X)
p <- ncol(X); n <- nrow(X)
rownames(counts) <- paste0("gene_", seq_len(p))
colnames(counts) <- paste0("spot_", seq_len(n))
## Make array coordinates - filled rectangle
cdata <- list()
cdata$row <- pos[,1]
cdata$col <- pos[,2]
cdata <- as.data.frame(do.call(cbind, cdata))
cdata$imagerow <- cdata$row
cdata$imagecol <- cdata$col
row.names(cdata) <- colnames(counts)
library(Seurat)
## Make SCE
seu <-  CreateSeuratObject(counts= exp(counts)-1, meta.data=cdata)
seu$true_clusters <- y
return(seu)
}
seu <- gendata_spatial(height=30, width=30)
head(seu@meta.data)
seu@assays$RNA@counts
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=7, platform = 'ST', verbose=F)
seu2 <- DR.SC(seu, K=NULL, K_set =6:8, platform = 'ST', verbose=F)
X <- t(LogNormalize(seu@assays$RNA@counts[var.features,],))
X
var.features
Adj_sp <- getAdj(seu, platform = 'ST')
dim(Adj_sp)
icMat <- selectClustNumber(X,Adj_sp, q=15, K_set= 6:8, parallel="doSNOW", num_core = 4)
icMat
X
dat <- gendata_sp(height=30, width=30)
X <- dat$X
Adj_sp <- getAdj(seu, platform = 'ST')
dim(Adj_sp)
icMat <- selectClustNumber(X,Adj_sp, q=15, K_set= 6:8, parallel="doSNOW", num_core = 4)
icMat
dim(X)
X[1:4, 1:4]
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 6:8, parallel="doSNOW", num_core = 4)
icMat
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 6:8, parallel="doSNOW", num_core = 4, pen.const=0.5)
icMat
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 6:8, parallel="doSNOW",
num_core = 4, pen.const=0.1)
icMat
Adj_sp <-runAdj(X, dat$pos, platform = 'ST')
dat <- gendata_sp(height=30, width=30)
X <- dat$X
Adj_sp <-runAdj(X, dat$pos, platform = 'ST')
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 6:8, parallel="doSNOW",
num_core = 4, pen.const=1)
icMat
log(log(900+ 100))
gendata_sp
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 6:8, parallel="doSNOW",
num_core = 4, pen.const=0.5)
icMat
seu2 <- DR.SC(seu, K=NULL, K_set =6:8, platform = 'ST', verbose=F)
seu2 <- DR.SC(seu, K=NULL, K_set =6:8, platform = 'ST', verbose=F, pen.const=0.1)
seu2 <- DR.SC(seu, K=NULL, K_set =6:8, platform = 'ST', verbose=F, pen.const=0.01)
dat <- gendata_sp(height=30, width=30, p=500)
X <- dat$X
Adj_sp <-runAdj(X, dat$pos, platform = 'ST')
dat <- gendata_sp(height=30, width=30, p=500,K=4)
X <- dat$X
Adj_sp <-runAdj(X, dat$pos, platform = 'ST')
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 2:6, parallel="doSNOW",
num_core = 4, pen.const=0.5)
icMat
icMat <- selectClustNumber(X,Adj_sp=NULL, q=10, K_set= 2:6, parallel="doSNOW",
num_core = 4)
icMat
seu2 <- DR.SC(seu, q=10, K=NULL, K_set =6:8, platform = 'ST', verbose=F)
seu <- gendata_spatial(height=30, width=30, K=4)
head(seu@meta.data)
seu2 <- DR.SC(seu, q=10, K=NULL, K_set =2:6, platform = 'ST', verbose=F)
icMat
icMat <- selectClustNumber(X,Adj_sp=NULL, q=15, K_set= 2:6, parallel="doSNOW",
num_core = 4)
icMat
seu
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
head(seu@meta.data)
seu
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=7, platform = 'ST', verbose=F)
mclust::adjustedRandIndex(seu2$spatial.drsc.cluster, seu$true_clusters)
seu2 <- DR.SC(seu, q=10, K=NULL, K_set =2:6, platform = 'ST', verbose=F)
mbicPlot(seu2)
drscPlot(seu2)
drscPlot(seu2, visu.method = 'UMAP')
?RunUMAP
drscPlot <- function(seu, dims=1:5, visu.method='tSNE',...){
require(Seurat)
if(visu.method=='tSNE'){
seu <- RunTSNE(seu, reduction="dr-sc", dims=dims,verbose = F)
}else if(visu.method=='UMAP'){
seu <- RunUMAP(seu, reduction="dr-sc", dims=dims,verbose = F)
}
p1 <- DimPlot(seu, ...)
return(p1)
}
drscPlot(seu2, visu.method = 'UMAP')
genes <- c("gene-24","gene-68", "gene-95","gene-55")
RidgePlot(seu2, features = genes, ncol = 2)
pkgdown::build_site()
library(DR.SC)
pkgdown::build_site()
library(DR.SC)
pkgdown::build_site()
.Last.error.trace
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
rm(list=ls())
library("DR.SC")
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
seu@assays$RNA@var.features
seu@assays$RNA@counts[var.features,]
var.features <- seu@assays$RNA@var.features
seu@assays$RNA@counts[var.features,]
X <- t(LogNormalize(seu@assays$RNA@counts[var.features,],))
seu
is.null(seu@assays$RNA@var.features)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), ...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}else{
var.features <- seu@assays$RNA@var.features
cat("K=1 \n")
}
X <- t(LogNormalize(seu@assays$RNA@counts[var.features,],))
resList <- DR.SC.dgCMatrix(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay='RNA')
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
rm(list=ls())
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
?LogNormalize
var.features <- seu@assays$RNA@var.features
class(seu@assays$RNA@counts[var.features,])
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
rm(list=ls())
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
var.features <- seu@assays$RNA@var.features
X <- t(Seurat::LogNormalize(seu@assays$RNA@counts[var.features,],))
X <- t(Seurat::LogNormalize(as.matrix(seu@assays$RNA@counts[var.features,]),))
resList <- DR.SC.dgCMatrix(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
class(X)
DR.SC.dgCMatrix <- function(X,Adj_sp=NULL, q=15, K= NULL,
error.heter= T, K_set = seq(2, 10), beta_grid=seq(0.5, 5, by=0.5),
maxIter=30, epsLogLik=1e-5, verbose=F, maxIter_ICM=6,pen.const=1,
wpca.int=F, parallel='doSNOW', num_core=5){
if (!inherits(X, "dgCMatrix"))
stop("X must be dgCMatrix objects or Seurat objects")
if(is.null(K)){
icMat <- selectClustNumber(X, Adj_sp, q, K_set= K_set, parallel=parallel, num_core = num_core, pen.const=pen.const)
K_best <- K_set[which.min(icMat[,"mbic"])]
cat("The best number of cluster is: ", K_best, '\n')
}else{
K_best <- K
}
resList <- simulDRcluster(X,Adj_sp = Adj_sp, q, K_best, error.heter= error.heter,
beta_grid=beta_grid,
maxIter=maxIter, epsLogLik=epsLogLik, verbose=verbose, maxIter_ICM=maxIter_ICM,pen.const=pen.const,
alpha=F, wpca.int=wpca.int, diagSigmak=FALSE)
if(is.null(K)){
resList$K_best <- K_best
resList$icMat <- icMat
}
return(resList)
}
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
DR.SC
DR.SC.Seurat
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), ...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}else{
var.features <- seu@assays$RNA@var.features
}
X <- t(Seurat::LogNormalize(as.matrix(seu@assays$RNA@counts[var.features,]),))
resList <- DR.SC.dgCMatrix(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay='RNA')
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
LogNormalize
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
rm(DR.SC.Seurat)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
DR.SC
DR.SC.Seurat
rm(DR.SC.dgCMatrix)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
library(DR.SC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
mclust::adjustedRandIndex(seu2$spatial.drsc.cluster, seu$true_clusters)
spatialPlotClusters(seu2)
drscPlot(seu2)
drscPlot(seu2, visu.method = 'UMAP')
genes <- c("gene-24","gene-68", "gene-95","gene-55")
RidgePlot(seu2, features = genes, ncol = 2)
VlnPlot(seu2, features = genes, ncol=2)
DR.SC.Seurat <- function(seu, q=15, K=NULL, platform= c("Visium", "ST", 'scRNAseq'),
nfeatures=2000,K_set = seq(2, 10), ...){
require(Seurat)
if (!inherits(seu, "Seurat"))
stop("method is only for Seurat objects")
if(platform == 'scRNAseq'){
Adj_sp <- NULL
}else{
Adj_sp <- getAdj(seu,  platform)
}
if(is.null(seu@assays$RNA@var.features)){
seu <- FindVariableFeatures(seu, nfeatures = nfeatures)
}else{
var.features <- seu@assays$RNA@var.features
}
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,]))
resList <- DR.SC.dgCMatrix(X,Adj_sp = Adj_sp, q=q, K=K,K_set =K_set, ...)
if(is.null(K)){
K <- resList$K_best
}
hZ <-resList$hZ
row.names(hZ) <- colnames(seu)
colnames(hZ) <- paste0('DR-SC', 1:q)
seu@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay='RNA')
seu$spatial.drsc.cluster <- resList$cluster
Idents(seu) <- factor(paste0("cluster", seu$spatial.drsc.cluster), levels=paste0('cluster',1:K))
seu@tools <- resList[-c(1,2)]
return(seu)
}
seu2 <- DR.SC(seu, q=10, K=NULL, K_set =2:6, platform = 'ST', verbose=F)
mbicPlot(seu2)
genes <- c("gene-24","gene-68", "gene-95","gene-55")
RidgePlot(seu2, features = genes, ncol = 2)
DotPlot(seu2, features = genes)
# standard scaling (no regression)
seu2 <- ScaleData(seu2)
DoHeatmap(subset(seu2, downsample = 500), features = genes, size = 5)
seu2 <- RunTSNE(seu2, reduction="dr-sc", reduction.key='drsc_tSNE_')
FeaturePlot(seu2, features = genes, reduction = 'tsne' ,ncol=2)
DR.SC::
DR.SC::DR.SC.Seurat
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
library(DR.SC)
seu <- gendata_spatial(height=30, width=30,p=500, K=4)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
mclust::adjustedRandIndex(seu2$spatial.drsc.cluster, seu$true_clusters)
seu2$spatial.drsc.cluster
spatialPlotClusters(seu2)
spatialPlotClusters(seu2)
genes <- c("gene-24","gene-68", "gene-95","gene-55")
RidgePlot(seu2, features = genes, ncol = 2)
DR.SC(matrix(rnorm(500*10), 500, 10))
DR.SC(Matrix::bandSparse(100000))
Methods("DR.SC")
methods('DR.SC')
DR.SC.Seurat
DR.SC
?Seurat
?`DR.SC-package`
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trace
?drop.scope
library(DR.SC)
?DR.SC
?DR.SC
library(help="DR.SC")
?DR.SC-package
?DR.SC
?DR.SC
?DR.SC
?DR.SC::DR.SC
pkgdown::build_site()
