DotPlot(seus, features = genes)
top20 <-  dat %>%
group_by(cluster) %>%
top_n(n = 20, wt = avg_log2FC)
genes <- top20$gene
# standard scaling (no regression)
seus <- ScaleData(seus)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
# choose 2000 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480, verbose = F)
### Given K
seus <- DR.SC(seus, K_set=3:8, platform = 'Visium', variable.type='SVGs', verbose=F)
### Given K
seus <- DR.SC(seus, K=3:8, platform = 'Visium', variable.type='SVGs', verbose=F)
mbicPlot(seus)
seus <- selectModel(seus)
mbicPlot(seus)
mbicPlot(criteria = 'BIC')
mbicPlot(seus, criteria = 'BIC')
mbicPlot(seus)
spatialPlotClusters(seus)
drscPlot(seus, dims=1:10)
mclust::adjustedRandIndex(seus$spatial.drsc.cluster, dlpfc151510$annotation)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
genes <- top20$gene
# standard scaling (no regression)
seus <- ScaleData(seus)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
library(DR.SC)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
#> Neighbors were identified for 900 out of 900 spots.
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
mclust::adjustedRandIndex(resList$Objdrsc[[1]]$cluster, seu$true_clusters)
str(resList)
head(seu@assays$RNA@meta.features)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
system.time(
resList <- DR.SCpar::DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=3:5, maxIter=20, verbose=T)
)
system.time(
resList <- DR.SCpar::DR.SC_fit(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, num_core = 3)
)
DR.SCpar::DR.SC_fit
system.time(
resList <- DR.SCPar2::DR.SC_fit(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, num_core = 3)
)
DR.SCpar:::simulDRcluster
system.time(
resList <- DR.SCpar:::simulDRcluster(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, coreNum = 3)
)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
seu1[["RNA"]]@misc[['icMat']]
str(seu1[["RNA"]]@misc)
seu1[["RNA"]]@misc[[3]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
head(seu1@assays$RNA@meta.features)
drscPlot(seu1)
mbicPlot(seu1)
seu2 <- selectModel(seu1, pen.const = 0.3, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=3:5, maxIter=20, verbose=T)
)
str(resList)
str(selectModel(resList, pen.const = 0.5))
seu[['RNA']]@misc
selectModel(resList, pen.const = 0.5)
reslist <- DR.SC:::simulDRcluster(X,Adj_sp=NULL, q=15,K=4, maxIter=20, verbose=T)
mclust::adjustedRandIndex(reslist$cluster, seu$true_clusters)
str(reslist)
library(DR.SC)
data("dlpfc151510", package = 'DR.SC')
library(Seurat)
# standard log-normalization
dlpfc151510 <- NormalizeData(dlpfc151510, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
### Given K
seu <- DR.SC(seu, K=7, platform = 'Visium',nfeatures=500, variable.type = 'HVGs',verbose=F)
library(DR.SC)
### Given K
seu <- DR.SC(seu, K=7, platform = 'Visium',nfeatures=500, variable.type = 'HVGs',verbose=F)
spatialPlotClusters(seu)
drscPlot(seu)
# choose 480 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480)
### Given K
seus <- DR.SC(seus, K=7, platform = 'Visium', nfeatures=480,
variable.type='SVGs', verbose=T)
### Given K
seus <- DR.SC(seus, K=3:9, platform = 'Visium', variable.type='SVGs', verbose=F)
library(DR.SC)
Adj <- getAdj(seu, platform = 'seqfish')
summary(rowSums(Adj))
Adj <- getAdj(seu, platform = 'Visium')
summary(rowSums(Adj))
library(DR.SC)
seu <- gendata_RNAExp(height=10, width=10,p=40, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
#> Neighbors were identified for 900 out of 900 spots.
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
mclust::adjustedRandIndex(resList$Objdrsc[[1]]$cluster, seu$true_clusters)
str(resList)
head(seu@assays$RNA@meta.features)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
library(DR.SC)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
seu1 <- DR.SC(seu,K=3:5,  maxIter=20)
seu1[["RNA"]]@misc[['icMat']]
str(seu1[["RNA"]]@misc)
seu1[["RNA"]]@misc[[3]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
seu1[["RNA"]]@misc
seu1[["RNA"]]@misc[[1]]
seu1[["RNA"]]@misc[[2]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
head(seu1@assays$RNA@meta.features)
drscPlot(seu1)
mbicPlot(seu1)
seu2 <- selectModel(seu1, pen.const = 0.3, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
seu2 <- selectModel(seu1, pen.const = 0.1, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
seus <- selectModel(seus)
mbicPlot(seus)
seus <- selectModel(seus, pen.const = 0.5)
mbicPlot(seus)
seus <- selectModel(seus, pen.const = 0.8)
mbicPlot(seus)
mbicPlot(seus)
spatialPlotClusters(seus)
drscPlot(seus, dims=1:10)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
seu <- DR.SC(seu, K=7, platform = 'Visium', verbose=F, maxIter=2)
library(DR.SC)
library(DR.SC)
?selectModel.Seurat
example("DR.SC")
?DR.SC_fit
example("DR.SC_fit")
library(DR.SC)
?DR.SC
?DR.SC
library(DR.SC)
?DR.SC
?DR.SC
li
library(DR.SC)
?DR.SC
?DR.SC_fit
library(DR.SC)
example("drscPlot")
example("mbicPlot")
?DR.SC
?DR.SC
library(DR.SC)
?DR.SC
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(DR.SC)
library(knitr)
library(DR.SC)
getAdj_auto(cbind(rnorm(100), rnorm(100)))
getAdj_auto <- function(pos, lower.med=4, upper.med=6, radius.upper= 100){
if (!inherits(pos, "matrix"))
stop("method is only for  matrix object!")
radius.lower <- 1
Adj_sp <- getneighborhood_fast(pos, radius=radius.upper)
Med <- summary(Matrix::rowSums(Adj_sp))['Median']
if(Med < lower.med) stop("The radius.upper is too smaller that cannot find median neighbors greater than 4.")
start.radius <- 1
Med <- 0
message("Find the adjacency matrix by bisection method...")
maxIter <- 30
k <- 1
while(!(Med >= lower.med && Med <=upper.med)){ # ensure that each spot has about 4~6 neighborhoods in median.
Adj_sp <- getneighborhood_fast(pos, radius=start.radius)
Med <- summary(Matrix::rowSums(Adj_sp))['Median']
if(Med < lower.med){
radius.lower <- start.radius
start.radius <- (radius.lower + radius.upper)/2
}else if(Med >upper.med){
radius.upper <- start.radius
start.radius <- (radius.lower + radius.upper)/2
}
message("Current radius is ", round(start.radius, 2))
message("Median of neighborhoods is ", Med)
if(k > maxIter) {
message("Reach the maximum iteration but can not find a proper radius!")
break;
}
k <- k + 1
}
return(Adj_sp)
}
getAdj_auto(cbind(rnorm(100), rnorm(100)))
rm(getAdj_auto)
library(DR.SC)
getAdj_auto(cbind(rnorm(100), rnorm(100)))
library(DR.SC)
?inherits
x <- try(a= b+1)
x
x <- try(a= b+1, silent = T)
x <- try({a= b+1}, silent = T)
x
results_score <- x
inherits(results_score, "try-error")
!inherits(results_score, "try-error")
library(DR.SC)
library("DR.SC")
data("dlpfc151510", package = 'DR.SC')
count <- dlpfc151510@assays$RNA@counts
count[1:4,1:5]
meta_data <- data.frame(row=dlpfc151510@meta.data$row, col=dlpfc151510@meta.data$col, manual_annotation=dlpfc151510$annotation)
library(Seurat)
library(Seurat)
row.names(meta_data) <- colnames(count)
## create Seurat object
seu <- CreateSeuratObject(counts=count, meta.data = meta_data)
head(seu)
meta_data <- data.frame(row=dlpfc151510@meta.data$row, col=dlpfc151510@meta.data$col, annotation=dlpfc151510$annotation)
row.names(meta_data) <- colnames(count)
## create Seurat object
seu <- CreateSeuratObject(counts=count, meta.data = meta_data)
head(seu)
dim(dlpfc151510)
DR.SC
DR.SC:::DR.SC.Seurat
library(Seurat)
# standard log-normalization
dlpfc151510 <- NormalizeData(dlpfc151510, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
seu
seu@assays$RNA@var.features[1:10]
?FindSVGs
# choose 480 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480)
seus@assays$RNA@var.features[1:10]
### Given K
seus <- DR.SC(seus, K=7, platform = 'Visium', verbose=T)
spatialPlotClusters(seus)
drscPlot(seus)
seus
SVGs <- topSVGs(seus, ntop = 400)
dat <- FindAllMarkers(seus, features = SVGs)
genes <- top2$gene[seq(1, 12, by=2)]
head(dat)
library(dplyr, verbose=F)
top2 <-  dat %>%
group_by(cluster) %>%
top_n(n = 2, wt = avg_log2FC)
top2
genes <- top2$gene[seq(1, 12, by=2)]
RidgePlot(seus, features = genes, ncol = 2)
VlnPlot(seus, features = genes, ncol=2)
top20 <-  dat %>%
group_by(cluster) %>%
top_n(n = 20, wt = avg_log2FC)
genes <- top20$gene
# standard scaling (no regression)
seus <- ScaleData(seus)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
library(DR.SC)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
head(seu@meta.data)
seu
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose highly variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 400)
pkgdown::build_site()
pkgdown::build_site()
?DR.SC::drsc
?Mclust
example(DR.SC_fit)
example(DR.SC_fit)
library(DR.SC)
example(DR.SC_fit)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart = 5)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart = 10)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart = 10, int.model = NULL)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart = 15)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4:5, maxIter=25, verbose=TRUE, nstart = 15, coreNum = 2)
Z <- drscList$Objdrsc[[1]]$hZ
intList <- DR.SC:::parfun_int(4, Z, T)
intList <- DR.SC:::parfun_int(4, Z, T, nstart = 40)
str(intList )
mclust::adjustedRandIndex(intList$yveck, seu$true_clusters)
intList <- DR.SC:::parfun_int(4, Z, T)
mclust::adjustedRandIndex(intList$yveck, seu$true_clusters)
k <- 4
int.model='EEE'
mclus2 <- list(loglik = -1e20)
i <- 1
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mycluster <- function(Z, G, int.model='EEE'){
mclus2 <- Mclust(Z, G=G, modelNames=int.model,verbose=FALSE)
return(mclus2)
}
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
library(mclust)
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
mclus2$loglik
nstart
nstart=5
mclus2 <- list(loglik = -1e20)
for(i in 1:nstart){
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
if(mclus_tmp$loglik> mclus2$loglik) mclus2 <- mclus_tmp
}
mclus2
mclus2$loglik
i <- 2
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
1+(i-1)*10
i <- 3
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
?Mclust
set.seed(100)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
Z <- Z + matrix(rnorm(100*15, 100, 15))
Z <- Z + matrix(rnorm(100*15), 100, 15)
i <- 1
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
i <- 2
set.seed(1+(i-1)*10)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
set.seed(1000)
mclus_tmp <- mycluster(Z, k, int.model)
mclus_tmp$loglik
mclus2$loglik
mclus_tmp$loglik
mclus2 <- Mclust(Z, G=4, modelNames=int.model,verbose=FALSE)
mclus2$loglik
mclus2 <- Mclust(Z, G=4, modelNames=int.model,verbose=FALSE)
mclus2$loglik
mclus2 <- Mclust(Z, G=4, modelNames=int.model,verbose=FALSE)
mclus2$loglik
set.seed(1)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
set.seed(10)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
set.seed(100)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1, approxPCA = T)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1, approxPCA = T)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, nstart =1, approxPCA = T)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
library(DR.SC)
example("DR.SC")
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=2, verbose=TRUE)
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=20, verbose=TRUE)
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=20, verbose=TRUE, approxPCA=T)
pr <- DR.SC:::approxPCA(X,q=15)
dim(X)
str(X)
pr <- DR.SC:::approxPCA(as.matrix(X),q=15)
pr$PCs[1:3,1:4]
pr2 <- DR.SC:::wpca(as.matrix(X),q=15)
pr2$PCs[1:3,1:4]
example("DR.SC_fit")
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=2, verbose=TRUE)
pr <- DR.SC:::approxPCA(as.matrix(X),q=15)
pr$PCs[1:3,1:4]
pr2 <- DR.SC:::wpca(as.matrix(X),q=15)
pr2$PCs[1:3,1:4]
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=2, verbose=TRUE, approxPCA = T)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE)
DR.SC_fit
drscList3 <- drsc(X,Adj_sp=Adj_sp, q=15, K=7)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F, nstart = 5)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
set.seed(1)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
set.seed(10)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F, nstart = 5)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F, nstart = 5)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = F, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
library(DR.SC)
set.seed(10)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=7, verbose = T, approxPCA = T, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = T, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = F, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = F, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA=F)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
DR.SC_fit
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15 K=4, maxIter=25, verbose=TRUE, approxPCA=F)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F, nnstart = 2)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F, nstart = 2)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F, nstart = 6)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = F, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = T, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = F, nstart = 1)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F, nstart = 6)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = F, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList3 <- DR.SC:::drsc(X,Adj_sp=Adj_sp, q=15, K=4, verbose = T, approxPCA = T, nstart = 1)
mclust::adjustedRandIndex(drscList3$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList1 <- DR.SC_fit(X,Adj_sp=Adj_sp, K=4, maxIter=25, verbose=TRUE, approxPCA = T)
mclust::adjustedRandIndex(drscList1$Objdrsc[[1]]$cluster, seu$true_clusters)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15, K=4, maxIter=25, verbose=TRUE, approxPCA=F, nstart = 1)
mclust::adjustedRandIndex(drscList$Objdrsc[[1]]$cluster, seu$true_clusters)
