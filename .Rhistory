## check the corrrectness of Windows
devtools::check_win_release()
library(DR.SC)
### Given K
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4,platform="ST")
library(Seurat)
seu <- NormalizeData(seu)
# choose 400 highly variable features
seu <- FindVariableFeatures(seu, nfeatures = 400)
seu <- DR.SC(seu, K=NULL,K_set=2:3,  parallel="parallel", platform = 'ST', verbose=T)
library(DR.SC)
setwd("D:\\LearnFiles\\Research paper\\ProPCA\\RcppCode\\DR.SC")
library(devtools)
## check the corrrectness of Windows
## Because my computer system is Windows, I can use the check buttom for checking the warning, errors and note.
devtools::check_win_release()
rm(list=ls())
data("HCC1")
# standard log-normalization
HCC1 <- NormalizeData(HCC1)
library(Seurat)
# standard log-normalization
HCC1 <- NormalizeData(HCC1)
# choose 2000 highly variable features
seu <- FindVariableFeatures(HCC1, nfeatures = 2000)
HCC2 <- HCC1
HCC1 <- HCC2[seu@assays$RNA@var.features,]
usethis::use_data(HCC1)
usethis::use_data(HCC1, overwrite = T)
rm(list=ls())
library(DR.SC)
library(spatstat.core)
library(DR.SC)
example("DR.SC")
## check the corrrectness of Windows
## Because my computer system is Windows, I can use the check buttom for checking the warning, errors and note.
devtools::check_win_release()
cli
cli::spatstat.geom
?spatstat.geom
library(DR.SC)
print.boxx
remove.packages('spatstat.geom')
detach(package:DR.SC())
detach(package:DR.SC
)
library(DR.SC)
?spatstat.geom
install.packages('spatstat.geom')
install.packages("spatstat.geom")
install.packages("spatstat.geom")
library(DR.SC)
ï¼Ÿspatstat.geom
?spatstat.geom
library(DR.SC)
setwd("D:\\LearnFiles\\Research paper\\ProPCA\\RcppCode\\DR.SC")
library(devtools)
library(devtools)
## check the corrrectness of Windows
## Because my computer system is Windows, I can use the check buttom for checking the warning, errors and note.
devtools::check_win_release()
library(DR.SC)
?mbicPlot
?read10XVisium
library(DR.SC)
library(DR.SC)
?DR.SC
?WPCA
RunW?RunWPCA
?RunWPCA
example("RunWPCA")
library(Seurat)
seu <- gendata_RNAExp(height=40, width=40,p=1000, K=4)
## log-normalization
seu <- NormalizeData(seu)
##
seu <- FindVariableFeatures(seu, nfeatures=800)
## Scale
seu <- ScaleData(seu)
## Run WPCA
seu <- RunWPCA(seu)
seu
## Run tSNE based on wpca
seu <- RunTSNE(seu, reduction='wpca')
seu
## Find SVGs
seu <- FindSVGs(seu, nfeatures=800)
(genes <- topSVGs(seu, ntop=10))
Idents(seu) <- factor(paste0("cluster", seu$true_clusters), levels=paste0("cluster",1:4))
RidgePlot(seu, features = genes[1:2], ncol = 2)
FeaturePlot(seu, features = genes[1:2], reduction = 'tsne' ,ncol=2)
tit <- "Joint Dimension Reduction and Spatial Clustering for Single-Cell RNA
Sequencing and Spatial Transcriptomics Data"
nchar(tit)
tit <- "Joint Dimension Reduction and Spatial Clustering"
nchar(tit)
library(DR.SC)
?WPCA
?RunWPCA
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
# maxIter = 2 is only used for illustration, and user can use default.
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=4, maxIter=2, verbose=TRUE)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 100)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
# maxIter = 2 is only used for illustration, and user can use default.
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=4, maxIter=2, verbose=TRUE)
}
)
## Test Run time of examples
system.time(
{
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4,platform="ST")
library(Seurat)
seu <- NormalizeData(seu)
# choose 400 highly variable features
seu <- FindVariableFeatures(seu, nfeatures = 100)
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4, platform = 'ST', maxIter=2,verbose=FALSE)
# choose spatially variable features
seu <- FindSVGs(seu, nfeatures = 100)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=2,variable.type = 'SVGs',verbose=FALSE)
}
)
## Test Run time of examples
system.time(
{
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4,platform="ST")
library(Seurat)
seu <- NormalizeData(seu)
# choose 400 highly variable features
# seu <- FindVariableFeatures(seu, nfeatures = 100)
# maxIter = 2 is only used for illustration, and user can use default.
# seu1 <- DR.SC(seu, K=4, platform = 'ST', maxIter=2,verbose=FALSE)
# choose spatially variable features
seu <- FindSVGs(seu, nfeatures = 100)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=2,variable.type = 'SVGs',verbose=FALSE)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter = 2,verbose=FALS)
drscPlot(seu1)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter = 2,verbose=FALSE)
drscPlot(seu1)
}
)
drscPlot(seu1)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter = 2,verbose=FALSE)
drscPlot(seu1)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
seu <- FindSVGs(seu, nfeatures=100)
topSVGs(seu)
}
)
## Test Run time of examples
system.time(
{
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
seu
## generate scRNAseq data
seu <- gendata_RNAExp(height=20, width=20, platform="scRNAseq", p=100, K=4)
seu
}
)
## Test Run time of examples
system.time(
{
## S3 method for class "Seurat"
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
Adj_sp <- getAdj(seu, platform = 'ST')
## S3 method for class "matrix"
pos <- cbind(seu$row, seu$col)
Adj_sp <- getAdj(pos, radius=2)
cat("The number of neighborhoods for each spot is about: ",
summary(apply(Adj_sp, 1, function(x) sum(x==1)))[4], '\n')
## To ensure thatST platform has 4 neighborhoods,
## we tune the 'radius' parameters to 1.4
Adj_sp <- getAdj(pos, radius=1.4)
cat("The number of neighborhoods for each spot is about: ",
summary(apply(Adj_sp, 1, function(x) sum(x==1)))[4], '\n')
}
)
Adj_sp <- getAdj(seu, platform = 'ST')
Adj_sp <- getAdj(pos, radius=1.4)
suppressMessages()
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=100, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
seu1 <- DR.SC(seu, K_set=3:5,platform = 'ST',variable.type = 'SVGs', verbose=FALSE,pen.const=0.5)
mbicPlot(seu1)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=10, width=10,p=20, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
seu1 <- DR.SC(seu, K_set=3:5,platform = 'ST',variable.type = 'SVGs', verbose=FALSE,pen.const=0.5)
mbicPlot(seu1)
}
)
mbicPlot(seu1)
# choose spatially variable features
seu <- FindSVGs(seu)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=10, width=10,p=20, K=3)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
seu1 <- DR.SC(seu, K_set=2:4,platform = 'ST',variable.type = 'SVGs', verbose=FALSE,pen.const=0.5)
mbicPlot(seu1)
}
)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=10, width=10,p=20, K=3)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
seu1 <- DR.SC(seu, K_set=2:4,platform = 'ST', variable.type = 'SVGs',
verbose=FALSE,pen.const=0.5, maxIter=3)
mbicPlot(seu1)
}
)
mbicPlot
## Test Run time of examples
system.time(
{
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=100, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# seu1 <- DR.SC(seu, K_set=3:5,platform = 'ST',variable.type = 'SVGs', verbose=FALSE,pen.const=0.5)
seu@tools$icMat <- data.frame(K=2:5, mbic=c(105, 101, 99, 108))
mbicPlot(seu1)
}
)
mbicPlot(seu1)
mbicPlot(seu)
## Test Run time of examples
system.time(
{
library(Seurat)
seu <- gendata_RNAExp(height=20, width=20,p=100, K=4)
## log-normalization
seu <- NormalizeData(seu)
##
seu <- FindVariableFeatures(seu, nfeatures=80)
## Scale
seu <- ScaleData(seu)
## Run WPCA
seu <- RunWPCA(seu)
seu
## Run tSNE based on wpca
seu <- RunTSNE(seu, reduction='wpca')
seu
## Find SVGs
seu <- FindSVGs(seu, nfeatures=80)
(genes <- topSVGs(seu, ntop=10))
Idents(seu) <- factor(paste0("cluster", seu$true_clusters), levels=paste0("cluster",1:4))
RidgePlot(seu, features = genes[1:2], ncol = 2)
FeaturePlot(seu, features = genes[1:2], reduction = 'tsne' ,ncol=2)
}
)
RidgePlot(seu, features = genes[1:2], ncol = 2)
## Test Run time of examples
system.time(
{
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=100, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features using Seurat
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter=2,verbose=FALSE)
spatialPlotClusters(seu1)
}
)
spatialPlotClusters(seu1)
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
seu <- FindSVGs(seu, nfeatures=100)
(genes <- topSVGs(seu, ntop=10))
}
)
genes
message("SNR=", round(snr,4), '\n')
message("Find the spatially variables genes by SPARK-X...\n")
library(DR.SC)
### Check examples do not have errors
devtools::run_examples()
### Check examples do not have errors
devtools::run_examples()
### Check examples do not have errors
devtools::run_examples()
library(DR.SC)
setwd("D:\\LearnFiles\\Research paper\\ProPCA\\RcppCode\\DR.SC")
library(devtools)
## Because my computer system is Windows, I can use the check buttom for checking the warning, errors and note.
devtools::check_win_release()
### Check examples do not have errors
devtools::run_examples()
## Test Run time of examples
system.time(
{
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features using Seurat
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter=2,verbose=FALSE)
spatialPlotClusters(seu1)
}
)
tic <- proc.time()
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features using Seurat
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter=2,verbose=FALSE)
spatialPlotClusters(seu1)
toc <- proc.time()
toc - tic
tic <- proc.time()
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4,platform="ST")
library(Seurat)
seu <- NormalizeData(seu)
# choose 100 highly variable features
# seu <- FindVariableFeatures(seu, nfeatures = 100)
# maxIter = 2 is only used for illustration, and user can use default.
# seu1 <- DR.SC(seu, K=4, platform = 'ST', maxIter=2,verbose=FALSE)
# choose spatially variable features
seu <- FindSVGs(seu, nfeatures = 100)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=2,variable.type = 'SVGs',verbose=FALSE)
toc <- proc.time()
toc - tic
tic <- proc.time()
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4,platform="ST")
library(Seurat)
seu <- NormalizeData(seu)
# choose 100 highly variable features
# seu <- FindVariableFeatures(seu, nfeatures = 100)
# maxIter = 2 is only used for illustration, and user can use default.
# seu1 <- DR.SC(seu, K=4, platform = 'ST', maxIter=2,verbose=FALSE)
# choose spatially variable features
seu <- FindSVGs(seu, nfeatures = 40)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', maxIter=2,variable.type = 'SVGs',verbose=FALSE)
toc <- proc.time()
toc - tic
seu1
tic <- proc.time()
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 100)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
# maxIter = 2 is only used for illustration, and user can use default.
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=4, maxIter=2, verbose=TRUE)
toc <- proc.time()
toc - tic
tic <- proc.time()
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 40)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
# maxIter = 2 is only used for illustration, and user can use default.
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=4, maxIter=2, verbose=TRUE)
toc <- proc.time()
toc - tic
tic <- proc.time()
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=200, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter = 2,verbose=FALSE)
drscPlot(seu1)
toc <- proc.time()
toc - tic
tic <- proc.time()
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
# use SVGs to fit DR.SC model
# maxIter = 2 is only used for illustration, and user can use default.
seu1 <- DR.SC(seu, K=4,platform = 'ST', variable.type = 'SVGs',maxIter = 2,verbose=FALSE)
drscPlot(seu1)
toc <- proc.time()
toc - tic
library(DR.SC)
### Check examples do not have errors
devtools::run_examples()
29103176/1024
29103176/1024/1024
7778540/1024/1024
library(DR.SC)
library(DR.SC)
library(DR.SC)
library(DR.SC)
