var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'HVGs', maxIter=20)
icPlot(seu1)
drscPlot(seu1)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'HVGs', maxIter=30)
icPlot(seu1)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'HVGs', maxIter=25)
icPlot(seu1)
library(orclus)
library(help = "orclus")
library(DR.SC)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
#> Neighbors were identified for 900 out of 900 spots.
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
mclust::adjustedRandIndex(resList$Objdrsc[[1]]$cluster, seu$true_clusters)
str(resList)
head(seu@assays$RNA@meta.features)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
icPlot(seu1)
drscPlot(seu1)
str(resList)
?DR.SC_fit
?DR.SC
?DR.SC_fit
seu <- gendata_RNAExp(height=10, width=10,p=50, K=4)
library(Seurat)
seu <- NormalizeData(seu, verbose=FALSE)
# or choose 40 spatailly variable features using FindSVGs in DR.SC
seu <- FindSVGs(seu, nfeatures = 40, verbose=FALSE)
# users define the adjacency matrix
Adj_sp <- getAdj(seu, platform = 'ST')
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(seu[["RNA"]]@data[var.features,])
# maxIter = 2 is only used for illustration, and user can use default.
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=2:4, maxIter=2, verbose=TRUE)
drsc1 <- selectModel(drscList)
str(drsc1)
drscList <- DR.SC_fit(X,Adj_sp=Adj_sp ,K=2, maxIter=2, verbose=TRUE)
drsc1 <- selectModel(drscList)
str(drsc1)
selectModel.Seurat <- function(obj,  criteria = 'MBIC', pen.const=1){
if (!inherits(obj, "Seurat"))
stop("selectModel: method is only for Seurat or drscObject object")
assy <- DefaultAssay(obj)
reslist <- obj[[assy]]@misc[['dr-scInf']]
dfInf <- reslist$KinfMat
K_set <- reslist$KinfMat[,"K"]
nK <- length(K_set)
icMat <- matrix(Inf, nK, 3)
colnames(icMat) <- toupper(c("MBIC", "BIC", "AIC"))
for(k in 1:nK){
# k <- 1
n <- dfInf[k,3]; p <- dfInf[k,4];  dfree <- dfInf[k,5]
loglik <- dfInf[k, 2]
icMat[k, ] <-c(  MBIC =  -2.0* loglik +dfree * log(n) * log(log(p+n))*pen.const,
AIC = -2.0* loglik +dfree * 2,
BIC =  -2.0* loglik +dfree * log(n))
}
criteria <- toupper(criteria)
icVec <- icMat[,criteria]
min_indx <- which.min(icVec)
bestK <- K_set[min_indx]
icMat <- cbind(K=K_set, icMat)
hZ <- reslist$hZList[[min_indx]]
row.names(hZ) <- colnames(obj)
colnames(hZ) <- paste0('DR-SC', 1: ncol(hZ))
obj@reductions$"dr-sc" <- CreateDimReducObject(embeddings = hZ, key='DRSC_', assay=assy)
obj$spatial.drsc.cluster <- as.vector(reslist$clusterList[[min_indx]])
Idents(obj) <- factor(paste0("cluster", obj$spatial.drsc.cluster), levels=paste0('cluster',1: bestK))
obj[[assy]]@misc[['icMat']] <- icMat
return(obj)
}
selectModel <- function(obj, criteria = 'MBIC', pen.const=1){
UseMethod("selectModel")
}
selectModel.drscObject <- function(obj, criteria = 'MBIC', pen.const=1){
# select the best model based on the returned values from SimulDRcluster
if(!inherits(obj, 'drscObject'))
stop('selectModel: method is only for Seurat or drscObject object!\n')
reslist <- extractInfModel(obj)
dfInf <- reslist$KinfMat
K_set <- reslist$KinfMat[,"K"]
nK <- length(K_set)
icVec <-  rep(Inf, nK)
for(k in 1:nK){
# k <- 1
n <- dfInf[k,3]; p <- dfInf[k,4];  dfree <- dfInf[k,5]
loglik <- dfInf[k, 2]
icVec[k] <- switch(criteria,
MAIC = -2.0* loglik +dfree * 2 * log(log(p+n))*pen.const,
AIC = -2.0* loglik +dfree * 2,
MBIC =  -2.0* loglik +dfree * log(n) * log(log(p+n))*pen.const,
BIC =  -2.0* loglik +dfree * log(n))
}
min_indx <- which.min(icVec)
bestK <- K_set[min_indx]
icMat <- cbind(K=K_set, IC=icVec)
cluster_PCList <- list(bestK= bestK, cluster=as.vector(reslist$clusterList[[min_indx]]),
hZ = reslist$hZList[[min_indx]], icMat=icMat)
return(cluster_PCList)
}
seu2 <- selectModel(seu1, pen.const = 0.3, criteria = 'MBIC')
seu2[["RNA"]]@misc
seu2[["RNA"]]@misc$icMat
mbicPlot <- function(seu, criteria="MBIC"){
if (!inherits(seu, "Seurat"))
stop("seu must be a Seurat object!")
assy <- DefaultAssay(seu)
if(is.null(seu[[assy]]@misc$icMat)) stop("There is no MBIC-related information in 'seu' object!")
# library(ggplot2)
icMat <- as.data.frame(seu[[assy]]@misc$icMat)
if(nrow(icMat)<2) stop("mbicPlot: there are less than two candidates in K!")
criteria <- toupper(criteria)
ggplot(data=icMat,
aes_string(x='K', y=criteria)) + geom_line(size=1) + cowplot::theme_cowplot() +
ylab(paste0(criteria, " value"))
}
mbicPlot(seu1)
library(ggplot2)
mbicPlot(seu1)
# drscPlot(seu2)
mbicPlot(seu2)
library(DR.SC)
## we generate the spatial transcriptomics data with lattice neighborhood, i.e. ST platform.
seu <- gendata_RNAExp(height=20, width=20,p=100, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose spatially variable features
seu <- FindSVGs(seu)
## Just for illustrating the usage of mbicPlot
seu[["RNA"]]@misc[['icMat']]data.frame(K=2:5, mbic=c(105, 101, 99, 108))
mbicPlot(seu)
seu[["RNA"]]@misc[['icMat']] <- data.frame(K=2:5, mbic=c(105, 101, 99, 108))
mbicPlot(seu)
seu[["RNA"]]@misc[['icMat']] <- data.frame(K=2:5, MBIC=c(105, 101, 99, 108))
mbicPlot(seu)
example("DR.SC_fit")
example("DR.SC")
example("drscPlot")
example("spatialPlotClusters")
example("selectMethod")
example("selectModel.Seurat")
?WPCA
?RunWPCA
wpca
DR.SC:::wpca
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
head(seu@meta.data)
### Given K
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 400)
seu2 <- DR.SC(seu, K=4, platform = 'ST', verbose=F)
mclust::adjustedRandIndex(seu2$spatial.drsc.cluster, seu$true_clusters)
spatialPlotClusters(seu2)
drscPlot(seu2)
drscPlot(seu2, visu.method = 'UMAP')
seu2 <- DR.SC(seu, q=10, K=2:6, platform = 'ST', verbose=F)
mbicPlot(seu2)
### Given K
seu <- NormalizeData(seu, verbose=F)
# choose 400 spatially variable features using FindSVGs
seus <- FindSVGs(seu, nfeatures = 400, verbose = F)
seu2 <- DR.SC(seus, K=4, platform = 'ST',variable.type='SVGs', verbose=F)
mclust::adjustedRandIndex(seu2$spatial.drsc.cluster, seu$true_clusters)
spatialPlotClusters(seu2)
drscPlot(seu2)
seu2 <- DR.SC(seus, q=10, K=2:6, platform = 'ST', variable.type='SVGs', verbose=F)
mbicPlot(seu2)
# or plot bic
mbicPlot(seu2, criteria = 'BIC')
mbicPlot(seu2, criteria = 'AIC')
log(900)
seu2[['RNA']]@misc$icMat
library(DR.SC)
seu2 <- selectModel(seu2)
# or plot BIC
mbicPlot(seu2, criteria = 'BIC')
mbicPlot(seu2, criteria = 'AIC')
# or plot BIC or AIC
# mbicPlot(seu2, criteria = 'BIC')
# mbicPlot(seu2, criteria = 'AIC')
# tune pen.const
seu2 <- selectModel(seu2, pen.const = 0.6)
mbicPlot(seu2)
# or plot BIC or AIC
# mbicPlot(seu2, criteria = 'BIC')
# mbicPlot(seu2, criteria = 'AIC')
# tune pen.const
seu2 <- selectModel(seu2, pen.const = 0.7)
mbicPlot(seu2)
dat <- FindAllMarkers(seu2)
suppressPackageStartupMessages(library(dplyr) )
# Find the top 1 marker genes, user can change n to access more marker genes
dat %>%group_by(cluster) %>%
top_n(n = 1, wt = avg_log2FC) -> top
genes <- top$gene
RidgePlot(seu2, features = genes, ncol = 2)
VlnPlot(seu2, features = genes, ncol=2)
seu2 <- RunTSNE(seu2, reduction="dr-sc", reduction.key='drsctSNE_')
FeaturePlot(seu2, features = genes, reduction = 'tsne' ,ncol=2)
DotPlot(seu2, features = genes)
# standard scaling (no regression)
dat %>%group_by(cluster) %>%
top_n(n = 30, wt = avg_log2FC) -> top
genes <- intersect(top$gene, seu2[['RNA']]@var.features)
## Change the HVGs to SVGs
#  <- topSVGs(seu2, 400)
seu2 <- ScaleData(seu2, verbose = F)
DoHeatmap(subset(seu2, downsample = 500),features = genes, size = 5)
setwd("D:\\LearnFiles\\文献阅读课\\2020-07-NUS-group\\ProPCA\\CRC materials")
dlpfc <- readRDS("humanbrain\\151510.rds") # 151673.rds
setwd("D:\\LearnFiles\\文献阅读课\\2020-07-NUS-group\\ProPCA\\Brain Data")
dlpfc <- readRDS("humanbrain\\151510.rds") # 151673.rds
load("D:/LearnFiles/Research paper/ProPCA/RcppCode/dataFromLinux/brain151510_spark.Rdata")
load("D:/LearnFiles/Research paper/ProPCA/RcppCode/dataFromLinux/brain_151510_spark.Rdata")
set.seed(101)
library(SingleCellExperiment)
adjPval <- PvalDF[,2]
names(adjPval) <- row.names(PvalDF)
sort_adjPval <- sort(adjPval)
if(sum(sort_adjPval<0.05)<= num_cut){
sp_sig_genes <- row.names(PvalDF)[PvalDF[,2] < 0.05]
}else{
sp_sig_genes <- names(sort_adjPval)[1:num_cut]
}
num_cut <- 2000
if(sum(sort_adjPval<0.05)<= num_cut){
sp_sig_genes <- row.names(PvalDF)[PvalDF[,2] < 0.05]
}else{
sp_sig_genes <- names(sort_adjPval)[1:num_cut]
}
sp_sig_genes
dlpfc151510 <- CreateSeuratObject(counts=counts(dlpfc[sp_sig_genes,]), meta.data = colData(dlpfc))
dlpfc151510 <- CreateSeuratObject(counts=counts(dlpfc[sp_sig_genes,]))
dlpfc151510
data("HCC1", package = 'DR.SC')
num_cut <- 1000
if(sum(sort_adjPval<0.05)<= num_cut){
sp_sig_genes <- row.names(PvalDF)[PvalDF[,2] < 0.05]
}else{
sp_sig_genes <- names(sort_adjPval)[1:num_cut]
}
dlpfc151510 <- CreateSeuratObject(counts=counts(dlpfc[sp_sig_genes,]))
num_cut <- 500
if(sum(sort_adjPval<0.05)<= num_cut){
sp_sig_genes <- row.names(PvalDF)[PvalDF[,2] < 0.05]
}else{
sp_sig_genes <- names(sort_adjPval)[1:num_cut]
}
dlpfc151510 <- CreateSeuratObject(counts=counts(dlpfc[sp_sig_genes,]))
dlpfc151510$row <- colData(dlpfc)$row
colData(dlpfc)$row
dlpfc151510$col <- colData(dlpfc)$col
dlpfc151510$annotation <- dlpfc$layer_guess_reordered
head(dlpfc151510)
usethis::use_data(dlpfc151510)
setwd("D:\\LearnFiles\\Research paper\\ProPCA\\RcppCode\\DR.SC")
usethis::use_data(dlpfc151510)
dim(dlpfc151510)
library("DR.SC")
?dlpfc151510
data("dlpfc151510", package = 'DR.SC')
rm(list=ls())
data("dlpfc151510", package = 'DR.SC')
# standard log-normalization
dlpfc151510 <- NormalizeData(dlpfc151510, verbose = F)
# choose 2000 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
### Given K
seu <- DR.SC(seu, K=7, platform = 'Visium',nfeatures=500, variable.type = 'HVGs',verbose=F)
spatialPlotClusters(seu)
spatialPlotClusters(seu) + ggplot2::coord_flip()
drscPlot(seu)
drscPlot(seu, visu.method = 'UMAP')
# choose 480 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480)
### Given K
seus <- DR.SC(seus, K=6, platform = 'Visium', nfeatures=480,
variable.type='SVGs', verbose=T)
Cstack_info()
memory.limit()
### Given K
seus <- DR.SC(seus, K=6, platform = 'Visium', nfeatures=480,
variable.type='SVGs', verbose=T)
spatialPlotClusters(seus)
drscPlot(seus)
SVGs <- topSVGs(seus, ntop = 400)
dat <- FindAllMarkers(seus, features = SVGs)
head(dat)
library(dplyr, verbose=F)
top2 <-  dat %>%
group_by(cluster) %>%
top_n(n = 2, wt = avg_log2FC)
top2
genes <- top2$gene[seq(1, 12, by=2)]
RidgePlot(seus, features = genes, ncol = 2)
VlnPlot(seus, features = genes, ncol=2)
VlnPlot(seus, features = genes, ncol=2)
seus <- RunTSNE(seus, reduction="dr-sc", reduction.key='drsc_tSNE_')
FeaturePlot(seus, features = genes, reduction = 'tsne' ,ncol=2)
FeaturePlot(seus, features = genes, reduction = 'tsne' ,ncol=2)
DotPlot(seus, features = genes)
top20 <-  dat %>%
group_by(cluster) %>%
top_n(n = 20, wt = avg_log2FC)
genes <- top20$gene
# standard scaling (no regression)
seus <- ScaleData(seus)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
# choose 2000 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480, verbose = F)
### Given K
seus <- DR.SC(seus, K_set=3:8, platform = 'Visium', variable.type='SVGs', verbose=F)
### Given K
seus <- DR.SC(seus, K=3:8, platform = 'Visium', variable.type='SVGs', verbose=F)
mbicPlot(seus)
seus <- selectModel(seus)
mbicPlot(seus)
mbicPlot(criteria = 'BIC')
mbicPlot(seus, criteria = 'BIC')
mbicPlot(seus)
spatialPlotClusters(seus)
drscPlot(seus, dims=1:10)
mclust::adjustedRandIndex(seus$spatial.drsc.cluster, dlpfc151510$annotation)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
genes <- top20$gene
# standard scaling (no regression)
seus <- ScaleData(seus)
DoHeatmap(subset(seus, downsample = 500), features = genes, size = 5)
library(DR.SC)
seu <- gendata_RNAExp(height=30, width=30,p=500, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
#> Neighbors were identified for 900 out of 900 spots.
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
mclust::adjustedRandIndex(resList$Objdrsc[[1]]$cluster, seu$true_clusters)
str(resList)
head(seu@assays$RNA@meta.features)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
system.time(
resList <- DR.SCpar::DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=3:5, maxIter=20, verbose=T)
)
system.time(
resList <- DR.SCpar::DR.SC_fit(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, num_core = 3)
)
DR.SCpar::DR.SC_fit
system.time(
resList <- DR.SCPar2::DR.SC_fit(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, num_core = 3)
)
DR.SCpar:::simulDRcluster
system.time(
resList <- DR.SCpar:::simulDRcluster(X,Adj_sp=Adj_sp,
q=15,K=3:5, maxIter=20, verbose=T, coreNum = 3)
)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
seu1[["RNA"]]@misc[['icMat']]
str(seu1[["RNA"]]@misc)
seu1[["RNA"]]@misc[[3]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
head(seu1@assays$RNA@meta.features)
drscPlot(seu1)
mbicPlot(seu1)
seu2 <- selectModel(seu1, pen.const = 0.3, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=3:5, maxIter=20, verbose=T)
)
str(resList)
str(selectModel(resList, pen.const = 0.5))
seu[['RNA']]@misc
selectModel(resList, pen.const = 0.5)
reslist <- DR.SC:::simulDRcluster(X,Adj_sp=NULL, q=15,K=4, maxIter=20, verbose=T)
mclust::adjustedRandIndex(reslist$cluster, seu$true_clusters)
str(reslist)
library(DR.SC)
data("dlpfc151510", package = 'DR.SC')
library(Seurat)
# standard log-normalization
dlpfc151510 <- NormalizeData(dlpfc151510, verbose = F)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
### Given K
seu <- DR.SC(seu, K=7, platform = 'Visium',nfeatures=500, variable.type = 'HVGs',verbose=F)
library(DR.SC)
### Given K
seu <- DR.SC(seu, K=7, platform = 'Visium',nfeatures=500, variable.type = 'HVGs',verbose=F)
spatialPlotClusters(seu)
drscPlot(seu)
# choose 480 spatially variable features
seus <- FindSVGs(seu, nfeatures = 480)
### Given K
seus <- DR.SC(seus, K=7, platform = 'Visium', nfeatures=480,
variable.type='SVGs', verbose=T)
### Given K
seus <- DR.SC(seus, K=3:9, platform = 'Visium', variable.type='SVGs', verbose=F)
library(DR.SC)
Adj <- getAdj(seu, platform = 'seqfish')
summary(rowSums(Adj))
Adj <- getAdj(seu, platform = 'Visium')
summary(rowSums(Adj))
library(DR.SC)
seu <- gendata_RNAExp(height=10, width=10,p=40, K=4)
library(Seurat)
seu <- NormalizeData(seu)
# choose 2000 variable features using Seurat
seu <- FindVariableFeatures(seu, nfeatures = 2000)
# users define the adjoint matrix
Adj_sp <- getAdj(seu, platform = 'ST')
#> Neighbors were identified for 900 out of 900 spots.
var.features <- seu@assays$RNA@var.features
X <- Matrix::t(LogNormalize(seu@assays$RNA@counts[var.features,],))
set.seed(1)
system.time(
resList <- DR.SC_fit(X,Adj_sp=Adj_sp, q=15,K=4, maxIter=20, verbose=T)
)
mclust::adjustedRandIndex(resList$Objdrsc[[1]]$cluster, seu$true_clusters)
str(resList)
head(seu@assays$RNA@meta.features)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
library(DR.SC)
seu1 <- DR.SC(seu,K=3:5, variable.type = 'SVGs', maxIter=20)
seu1 <- DR.SC(seu,K=3:5,  maxIter=20)
seu1[["RNA"]]@misc[['icMat']]
str(seu1[["RNA"]]@misc)
seu1[["RNA"]]@misc[[3]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
seu1[["RNA"]]@misc
seu1[["RNA"]]@misc[[1]]
seu1[["RNA"]]@misc[[2]]
str(seu1[["RNA"]]@misc[["dr-scInf"]])
head(seu1@assays$RNA@meta.features)
drscPlot(seu1)
mbicPlot(seu1)
seu2 <- selectModel(seu1, pen.const = 0.3, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
seu2 <- selectModel(seu1, pen.const = 0.1, criteria = 'MBIC')
seu2[["RNA"]]@misc$icMat
# drscPlot(seu2)
mbicPlot(seu2)
seus <- selectModel(seus)
mbicPlot(seus)
seus <- selectModel(seus, pen.const = 0.5)
mbicPlot(seus)
seus <- selectModel(seus, pen.const = 0.8)
mbicPlot(seus)
mbicPlot(seus)
spatialPlotClusters(seus)
drscPlot(seus, dims=1:10)
# choose 500 highly variable features
seu <- FindVariableFeatures(dlpfc151510, nfeatures = 500, verbose = F)
seu <- DR.SC(seu, K=7, platform = 'Visium', verbose=F, maxIter=2)
library(DR.SC)
library(DR.SC)
?selectModel.Seurat
example("DR.SC")
?DR.SC_fit
example("DR.SC_fit")
library(DR.SC)
?DR.SC
?DR.SC
library(DR.SC)
?DR.SC
?DR.SC
li
library(DR.SC)
?DR.SC
?DR.SC_fit
library(DR.SC)
example("drscPlot")
example("mbicPlot")
?DR.SC
?DR.SC
library(DR.SC)
?DR.SC
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
